Copyright (C) 2010, Adam Barth.  All rights reserved.

Note: I'll probably make this document available under a more liberal license
      in the future.  At the moment, however, no such license is available.

== Open Issues ==

* Browsers parse URLs differently depending on which operating system they're
  running on.  The problem is that they want to do sensible things for file
  paths, but file paths look different on Windows and Unix systems.

* How should we handle cases where browsers disaggree with the regular
  exression in RFC 3986?  Currently, this document aims to describe how
  browsers behave, but we'll likely need to compare that to RFC 3986 at some
  point.  Some specific differences that have been brought up on the mailing
  list:
    - http:///example.com/
    - http://example.com;

== Definitions ==

A /control character/ is a character whose value is less than or equal to
U+0020 (" ").

A /slash character/ is either U+???? ("/") or U+???? ("\").

An /authority terminating characters/ is either a slash charcter, U+???? ("?"),
U+???? ("#"), or U+???? (";").

During a parsing algorithm, the /remaining string/ are the characters of the
input that have not yet been consumed.

== Parsing a URL ==

Given a string of characters, find the scheme, as described in Section ??.

If the URL is invalid:
  -> Abort these steps.

If the scheme is a single upper or lower case ASCII character:
  -> TODO: Windows drive specs!

If the scheme is a ASCII case-insensitive match for "file":
  -> TODO: File URLs!

If the scheme is a ASCII case-insensitive match for "mailto":
  -> TODO: I think mailto URLs are special, but more testing is required.

If the scheme is a hierarchical:
  -> In the after-scheme, if any, find the authority, path, query, and
     fragment, as decribed in Section ??.

  -> In the authority, if any, find the user information, host, and port, as
     described in Section ??.

  -> In the user-info, if any, find the user name and password, as described in
     Section ??.

  -> Abort these steps.

The remaining string is the /path/.

=== Finding the scheme ==

Consume all leading and trailing control characters.

If the remaining string does not contain a ":" character:
  -> The URL is invalid.

  -> Abort these steps.

Consume characters up to, but not including, the first ":" character.  These
characters are the /scheme/.

Consume the ":" character.

The reamining characters are the /after-scheme/.

=== Finding the authority, path, query, and fragment ===

Consume any number of slash characters.

If the remaining string does not contain any authority terminating
characters:
  -> The remaining string is the /authority/.

  -> Abort these steps.

Consume characters up to, but not including, the first authority terminating
character.  The consumed characters are /authority/.

If the remaining string does not contain a "?" character or a "# character:
  -> The remaining string is the /path/.

  -> Abort these steps.

Consume characters up to, but not including, the first "?" or "#" charcter.
The consumed characters are the /path/.

If the first character of the remaining string is a "?" character:
  -> Consume the "?" character.

  -> If the remaining string does not contain a "#" character:
       -> The remaining string is the /query/.
       
       -> Abort these steps.

  -> Consume characters up to, but not including, the first "#" charcter.  The
     consumed characters are the /query/.

Consume the "#" character.

The remaining string is the /fragment/.

=== Finding the user information, host, and port ===

If the remaining string contains an "@" character:
  -> Consume characters up to, but not including the *last* "@" character.  The
     consumed characters are the /user-info/.

  -> Consume the "@" character.

If the remaining string does not contain an ":" character:
  -> The remaining string is the /host/.

  -> Abort these steps.

If the first character of the remaining string is a "[" character, the
remaining string contains a "]" character, and the last ":" character in the
remaining string occurs before the last "]" character in the remaining string:
  -> The remaining string is the /host/.

  -> Abort these steps.

Consume characters up to, but not including, the last ":" character.  The
consumed characters are the /host/.

Consume the ":" character.

The remaining string is the /port/.

=== Find the user name and password ===

If the remaining string does not contain a ":" character:
  -> The remaining string is the /user/.

  -> Abort these steps.

Consume characters up to, but not including, the first ":" character.  The
consumed characters are the /user/.

Consume the ":" character.

The remaining string is the /password/.
