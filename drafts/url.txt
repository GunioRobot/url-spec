Copyright (C) 2010, Adam Barth.  All rights reserved.

Note: I'll probably make this document available under a more liberal license
      in the future.  At the moment, however, no such license is available.

Data structures:
  * String -- A sequence of unicode characters
  * URLString -- A sequence of unicode characters segemented into the various
        components of a URL (scheme, user, password, host, port, path, query,
        and fragment).
  * ParsedURL -- A sequence of unicode characters segemented into the various
        parts of a URL (scheme, user, password, host, port, path, query, and
        fragment).  A ParsedURL differs from a URLString in that each component
        of the string (and the characters between the components) has been
        canonicalized.

Algorithms:
  * parse: String -> URLString
  * canonicalize: URLString -> ParsedURL
  * resolve: ParsedURL x String -> ParsedURL

== Definitions ==

A /control character/ is a character whose value is less than or equal to
U+0020 (" ").

A /slash character/ is either U+???? ("/") or U+???? ("\").

An /authority terminating characters/ is either X, Y, or Z.

During a parsing algorithm, let the /remaining string/ be the characters of
/spec/ that have not yet been consumed.

== Parsing a URL ==

Input: spec, a String
Output: a URLString

=== Phase 1 ===

Trim all the leading and trailing control characters from /spec/.

If the remaining string does not contain a ":" character,
  -> the entire remaining string is the /scheme/.  Abort these steps.

Consume characters up to, but not including, the first ":" character.  These
characters are the /scheme/.

Consume the ":" character.

Consume any number of slash characters.

If the remaining string does not contain any authority terminating
characters,
  -> the entire remaining string is the /authority/.  Abort these steps.

Consume characters up to, but not including, the first authority terminating
character.  The consumed characters are /authority/.

If the remaining string does not contain a "?" character,
  -> the entire remaining string is the /path/.  Abort these steps.

Consume characters up to, but not including, the first "?" charcter.  The
consumed characters are /path/.

Consume the "?" character.

If the remaining string does not contain a "#" character,
  -> the entire remaining string is the /query/.  Abort these steps.

Consume characters up to, but not including, the first "#" charcter.  The
consumed characters are /query/.

Consume the "#" character.

The remaining string is the /fragment/.

=== Phase 2 ===

Input: authority, a String
Output: ???

If the remaining string contains an "@" character,
  -> consume characters up to, but not including the "@" character.  The
  consumed characters are the /user-info/.  Consume the "@" character.

If the remaining string does not contain an ":" character,
  -> the entire remaining string is the /host/.  Abort these steps.

Consume characters up to, but not including, the ":" character.  The consumed
characters are the /host/.

Consume the ":" character.

The remaining charaters are the /port/.  FIXME: Isn't there some funny business
here regarding digits?

=== Phase 3 ===

Input: user-info, a String
Output: ???

If the remaining string does not contain a ":" character,
  -> the entire remaining string is the /user/.

Consume characters up to, but not including, the ":" character.  The consumed
characters are the /user/.

Consume the ":" character.

The remaining charaters are the /password/.
