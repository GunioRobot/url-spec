Copyright (C) 2010, Adam Barth.  All rights reserved.

Note: I'll probably make this document available under a more liberal license
      in the future.  At the moment, however, no such license is available.

Data structures:
  * String -- A sequence of unicode characters
  * URLString -- A sequence of unicode characters segemented into the various
        components of a URL (scheme, user, password, host, port, path, query,
        and fragment).
  * ParsedURL -- A sequence of unicode characters segemented into the various
        parts of a URL (scheme, user, password, host, port, path, query, and
        fragment).  A ParsedURL differs from a URLString in that each component
        of the string (and the characters between the components) has been
        canonicalized.

Algorithms:
  * parse: String -> URLString
  * canonicalize: URLString -> ParsedURL
  * resolve: ParsedURL x String -> ParsedURL

== Definitions ==

A /control character/ is a character whose value is less than or equal to
U+0020 (" ").

A /slash character/ is either U+???? ("/") or U+???? ("\").

An /authority terminating characters/ is either a slash charcter, U+???? ("?"),
U+???? ("#"), or U+???? (";").

During a parsing algorithm, let the /remaining string/ be the characters of
/spec/ that have not yet been consumed.

== Parsing a URL ==

Input: spec, a String
Output: a URLString

=== Phase 1 ===

Trim all the leading and trailing control characters from /spec/.

If the remaining string does not contain a ":" character,
  -> the entire remaining string is the /scheme/ (TODO: Reall?).  Abort these
     steps.

Consume characters up to, but not including, the first ":" character.  These
characters are the /scheme/.

Consume the ":" character.

Consume any number of slash characters.

If the remaining string does not contain any authority terminating
characters,
  -> the entire remaining string is the /authority/.  Abort these steps.

Consume characters up to, but not including, the first authority terminating
character.  The consumed characters are /authority/.

If the remaining string does not contain a "?" character or a "# character,
  -> the entire remaining string is the /path/.  Abort these steps.

Consume characters up to, but not including, the first "?" or "#" charcter.
The consumed characters are the /path/.

If the first remaining charater is a "?" character:
  -> Consume the "?" character.

  -> If the remaining string does not contain a "#" character,
       -> the entire remaining string is the /query/.  Abort these steps.

  -> Consume characters up to, but not including, the first "#" charcter.  The
     consumed characters are the /query/.

Consume the "#" character.

The remaining string is the /fragment/.

=== Phase 2 ===

Input: authority, a String
Output: ???

If the remaining string contains an "@" character,
  -> consume characters up to, but not including the "@" character.  The
  consumed characters are the /user-info/.  Consume the "@" character.

If the remaining string does not contain an ":" character,
  -> the entire remaining string is the /host/.  Abort these steps.

Consume characters up to, but not including, the ":" character.  The consumed
characters are the /host/.

Consume the ":" character.

The remaining charaters are the /port/.  FIXME: Isn't there some funny business
here regarding digits?

=== Phase 3 ===

Input: user-info, a String
Output: ???

If the remaining string does not contain a ":" character,
  -> the entire remaining string is the /user/.

Consume characters up to, but not including, the ":" character.  The consumed
characters are the /user/.

Consume the ":" character.

The remaining charaters are the /password/.

== Canonicalizing a URL ==

Input: url, a URLString
Output: a ParsedURL

If /url/ has a empty scheme,
-> Output the empty string and abort these steps.  FIXME: Really?

Output the /canonicalized scheme/.

Output ":".

If /url/ has a non-empty authority,
-> Output "//" and the /canonicalized authority/.

FIXME: What should we do if there's no authority but there are later parts?
"http:?foo#bar" or "http:;/bar" ?

Output the /canonicalized path/.

If /url/ has a non-empty query,
-> Output "?" and the /canonicalized query/.

If /url/ has a non-empty fragment,
-> Output "#" and the /canonicalized fragment/.

=== Canonicalized Scheme ===

Output the scheme, converted to lower case.

=== Canonicalized Authority ===

If the /url/ has a non-empty user-info,
  -> output the /canonicalized user-info/ and the "@" character.

Output the host, converted to lower case.  FIXME: There's a lot more we need to
do here.  For example, punycode and the escaping table.

FIXME: What about canonicalizing representations of IP addresses?  IPv6?

=== Canonicalized User-Info ===

Output the user.

If /url/ has a password,
  -> output ":" and the password.

FIXME: Is there a table for escaping these parts?
